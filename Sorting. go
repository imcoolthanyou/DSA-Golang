package sorting





func selectionSort() {
    arr := [5]int{1, 45, 3, 2, 4}

    for i := 0; i <= len(arr)-2; i++ {
        min := i
        for j := i; j <= len(arr)-1; j++ { //O(n^2)
            if arr[j] < arr[min] {
                min = j
            }

        }
        arr[min], arr[i] = arr[i], arr[min]
    }
    fmt.Println(arr)
}

func bubbleSort() {
    arr := [5]int{1, 45, 3, 2, 4}
    for i := len(arr) - 1; i >= 1; i-- {
        count := 0
        for j := 0; j <= i-1; j++ {
            //O(n^2)
            if arr[j] > arr[j+1] {
                arr[j], arr[j+1] = arr[j+1], arr[j]
                count++
            }
        }
        if count == 0 {
            break
        }
    }
    fmt.Println(arr)
}

func insertionSort() {
    arr := [5]int{1, 45, 3, 2, 4}
    for i := 0; i < len(arr)-1; i++ {
        j := i //O(n^2)
        for j > 0 && arr[j-1] > arr[j] {
            arr[j-1], arr[j] = arr[j], arr[j-1]
            j--
        }

    }
    fmt.Println(arr)
}

func mergeSort(arr []int, low, high int) {
    //Divide and merge
    if low == high {
        return
    }

    mid := (low + high) / 2

    mergeSort(arr, low, mid)
    mergeSort(arr, mid+1, high)
    merge(arr, low, mid, high)
}

func merge(arr []int, low, mid, high int) {
    temp := []int{}
    left := low
    right := mid + 1
    for left <= mid && right <= high {
        if arr[left] <= arr[right] {
            temp = append(temp, arr[left])
            left++
        } else {
            temp = append(temp, arr[right])
            right++
        }
    }
    for left <= mid {
        temp = append(temp, arr[left])
        left++
    }
    for right <= high {
        temp = append(temp, arr[right])
        right++
    }
    for i := low; i <= high; i++ {
        arr[i] = temp[i-low]
    }
}

func quickSort(arr []int, low, high int) {
    if low < high {
        pvtIndex := partition(arr, low, high)
        quickSort(arr, low, pvtIndex-1)
        quickSort(arr, pvtIndex+1, high)
    } else {
        return
    }
}

func partition(arr []int, low, high int) int {
    pivot := arr[low]
    i := low
    j := high

    for i < j {
        for arr[i] <= pivot && i <= high-1 {
            i++
        }
        for arr[j] > pivot && j >= low+1 {
            j--
        }
        if i < j {
            arr[i], arr[j] = arr[j], arr[i]
        }
    }
    arr[low], arr[j] = arr[j], arr[low]
    return j
}
